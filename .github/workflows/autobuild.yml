name: 打包
on: 
    workflow_dispatch:
jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Extract version from package.json
        run: echo "VERSION=$(node -p -e '`VERSION=${require(\"./package.json\").version}`')" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Build setup for Windows
        run: npm run package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Manual Tag Trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag -a ${{ github.run_id }} -m "Manual tag for release"
          git push origin ${{ github.run_id }}

      - name: Upload Setup
        uses: actions/upload-artifact@v2
        with:
          name: windows-release
          path: ./out/MusicFreeSetup.exe

      - name: Generate Portable
        run: mkdir ./out/MusicFree-win32-x64/portable

      - name: Zip Portable
        uses: montudor/action-zip@v1
        with:
          args: zip -r MusicFree-win32-x64-portable.zip ./out/MusicFree-win32-x64

      - name: Upload Portable
        uses: actions/upload-artifact@v2
        with:
          name: windows-portable-release
          path: ${{ github.workspace }}/MusicFree-win32-x64-portable.zip

  build-windows-legacy:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Extract version from package.json
        run: echo "VERSION=$(node -p -e '`VERSION=${require(\"./package.json\").version}`')" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Install Electron 22
        run: npm install electron@22

      - name: Build setup for Windows Legacy
        run: npm run package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Manual Tag Trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag -a ${{ github.run_id }} -m "Manual tag for release"
          git push origin ${{ github.run_id }}

      - name: Upload Setup
        uses: actions/upload-artifact@v2
        with:
          name: windows-legacy-release
          path: ./out/MusicFreeSetup.exe

      - name: Generate Portable
        run: mkdir ./out/MusicFree-win32-x64/portable

      - name: Zip Portable
        uses: montudor/action-zip@v1
        with:
          args: zip -r MusicFree-win32-x64-legacy-portable.zip ./out/MusicFree-win32-x64

      - name: Upload Portable
        uses: actions/upload-artifact@v2
        with:
          name: windows-legacy-portable-release
          path: ${{ github.workspace }}/MusicFree-win32-x64-legacy-portable.zip

  build-macos-x64:
    runs-on: macos-13

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Extract version from package.json
        run: echo "VERSION=$(node -p -e '`VERSION=${require(\"./package.json\").version}`')" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Build setup for macOS x64
        run: npm run make

      - name: Upload Setup
        uses: actions/upload-artifact@v2
        with:
          name: macos-x64-dmg-release
          path: ./out/make/MusicFree-${{ env.VERSION }}-x64.dmg

  build-macos-arm64:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Extract version from package.json
        run: echo "VERSION=$(node -p -e '`VERSION=${require(\"./package.json\").version}`')" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Build setup for macOS arm64
        run: npm run make -- --arch="arm64"

      - name: Upload Setup
        uses: actions/upload-artifact@v2
        with:
          name: macos-arm64-dmg-release
          path: ./out/make/MusicFree-${{ env.VERSION }}-arm64.dmg

  build-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Extract version from package.json
        run: echo "VERSION=$(node -p -e '`VERSION=${require(\"./package.json\").version}`')" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Build setup for Ubuntu
        run: npm run make

      - name: Upload Setup
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-release
          path: ./out/make/deb/x64/
